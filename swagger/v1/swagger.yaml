openapi: 3.0.3
info:
  version: 1.0.0
  title: Libra app - RestfulAPI docs
  description: An example app documentation in swagger
servers:
  - url: http://localhost:3000/api/v1
paths:
  /books:
    get:
      summary: Get a list of books
      description: Retrieve a paginated list of books from the server.
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination (default is 1)
          schema:
            type: integer
            format: int64
            minimum: 1
            default: 1
      responses:
        '200':
          description: A successful response with a list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      description: The ID of the book
                    title:
                      type: string
                      description: The title of the book
                    data:
                      type: object
                      properties:
                        info:
                          type: string
                          description: Some kind of information about the book
                      description: Additional data about the book
                    author_id:
                      type: integer
                      format: int64
                      description: The ID of the book's author
                    created_at:
                      type: string
                      format: date-time
                      description: The date and time the book was created
                    updated_at:
                      type: string
                      format: date-time
                      description: The date and time the book was last updated

    post:
      summary: Create a new book
      description: Endpoint for creating a new book.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBook'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /books/{id}:
    get:
      summary: Get a specific book by ID
      description: Retrieve a specific book, with associated author data. ID of the book is required to get a proper response.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        description: A successful response
        '200':
          description: A successful response with the book details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: The requested book was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    put:
      summary: Update a book by ID
      description: Enpoint for updating specific book.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBook'
      responses:
        '200':
          description: The book was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: The requested book was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    delete:
      summary: Delete a book by ID
      description: Enpoint for deleting specific book.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The book was deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/v1/books/{id}/upload_cover_image:
    post:
      summary: Upload a cover image for a book
      description: |
        Upload a cover image for a book. The image will be associated with the book
        identified by its unique `id`. The image will be stored in an S3 bucket, and
        the URL to access the image will be saved in the `cover_image_url` attribute
        of the book.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the book to upload the cover image for.
          schema:
            type: integer
        - name: cover_image
          in: formData
          required: true
          description: The cover image file to upload.
          schema:
            type: file
      responses:
        '200':
          description: Successful response with the cover image URL.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A message indicating the success of the upload.
                  cover_image_url:
                    type: string
                    description: The public URL to access the uploaded cover image.
        '422':
          description: Validation error. Unable to upload the cover image.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message.
                  details:
                    type: string
                    description: Additional details about the error.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message.
                  details:
                    type: string
                    description: Additional details about the error.
  /authors:
    get:
      summary: Show all authors with pagination
      description: Retrieve a paginated list of authors from the server
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination (default is 1)
          schema:
            type: integer
            format: int64
            minimum: 1
            default: 1
      responses:
        '200':
          description: A successful response with the author details
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Author'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
    post:
      summary: Create a new author
      description: Enpoint for createing new author.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAuthor'
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /authors/{id}:
    get:
      summary: Get a specific author
      description: Retrieve a specific author with associated books from the server
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Author ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorWithBooks'
        '404':
          $ref: '#/components/responses/RecordNotFound'
    put:
      summary: Update a specific author
      description: Endpoint for updating specific author.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Author ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAuthor'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      summary: Delete a specific author
      description: Endpoint for deleting authors with associated books.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Author ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        data:
          type: object
          properties:
            info:
              type: string
        author_id:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    NewBook:
      type: object
      required:
        - title
        - author_id
      properties:
        title:
          type: string
        author_id:
          type: integer
          format: int64
        data:
          type: object
          properties:
            info:
              type: string

    UpdateBook:
      type: object
      properties:
        title:
          type: string
        author_id:
          type: integer
          format: int64
        data:
          type: object
          properties:
            info:
              type: string
    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
        first_name:
          type: string
        last_name:
          type: string
        genre:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        genre:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    NewAuthor:
      type: object
      required:
        - first_name
        - last_name
      properties:
        first_name:
          type: string
        last_name:
          type: string
        genre:
          type: integer
    UpdateAuthor:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        genre:
          type: integer
    AuthorWithBooks:
      type: object
      properties:
        id:
          type: integer
          format: int64
        first_name:
          type: string
        last_name:
          type: string
        genre:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        books_data:
          type: array
          items:
            $ref: '#/components/schemas/Book'
    PaginationMeta:
      type: object
      properties:
        total_pages:
          type: integer
        total_count:
          type: integer
        current_page:
          type: integer
        next_page:
          type: integer
        prev_page:
          type: integer
  responses:
    RecordNotFound:
      description: Record not found
      content: